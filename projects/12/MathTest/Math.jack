// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Math.jack

/**
 * A library of commonly used mathematical functions.
 * Note: Jack compilers implement multiplication and division using OS method calls.
 */
class Math {
    static Array twoToThe;

    /** Initializes the library. */
    function void init() {
	let twoToThe = Array.new(16);
	let twoToThe[0] = 1;
	let twoToThe[1] = 2;
	let twoToThe[2] = 4;
	let twoToThe[3] = 8;
	let twoToThe[4] = 16;
	let twoToThe[5] = 32;
	let twoToThe[6] = 64;
	let twoToThe[7] = 128;
	let twoToThe[8] = 256;
	let twoToThe[9] = 512;
	let twoToThe[10] = 1024;
	let twoToThe[11] = 2048;
	let twoToThe[12] = 4096;
	let twoToThe[13] = 8192;
	let twoToThe[14] = 16384;
	let twoToThe[15] = 16384 + 16384;
	return;
    }

    /** Returns the absolute value of x. */
    function int abs(int x) {
	if (x > 0){
	    return x;
	}
	return -x;
    }

    /** Returns the product of x and y. 
     *  When a Jack compiler detects the multiplication operator '*' in the 
     *  program's code, it handles it by invoking this method. In other words,
     *  the Jack expressions x*y and multiply(x,y) return the same value.
     */
    function int multiply(int x, int y) {
	var int i, sum, shiftedX;
	let i = 0;
	let sum = 0;
	let shiftedX = x;
	if ((x=0)|(y=0)){
	    return 0;
	}
	while (i < 16){
	    if (Math.bit(y,i)){
		let sum = sum + shiftedX;
	    }
	    let shiftedX = shiftedX + shiftedX;
	    let i = i + 1;
	}
	return sum;
    }


    function boolean bit(int x,int i) {
        return ~((x & twoToThe[i]) = 0);
    }


    /** Returns the integer part of x/y.
     *  When a Jack compiler detects the multiplication operator '/' in the 
     *  program's code, it handles it by invoking this method. In other words,
     *  the Jack expressions x/y and divide(x,y) return the same value.
     */
    function int divide(int x, int y) {
	var int cur,q,result;
	var boolean posX,posY;
	let posX = (x < 0);
	let posY = (y < 0);
	let x = Math.abs(x);
	let y = Math.abs(y);
	if ((y > x) | (y < 0)){
	    return 0;
	}
	let cur = 32767 - y;
	if(~(cur < y)){
	    let q = Math.divide(x,y + y);
	}
	if ((x - Math.multiply((q + q),y)) < y){
	    let result = q + q;
	}
	else{
	    let result = q + q + 1;
	}
	if (~(posX = posY)){
	    return -result;
	}
	else{
	    return result;
	}
    }

    /** Returns the integer part of the square root of x. */
    function int sqrt(int x) {
	var int y,i,temp,square;
	let y = 0;
	let i = 7;
	while (~(i < 0)){
	    let temp = twoToThe[i] + y;
	    let square = Math.multiply(temp,temp);
	    if ((square > 0) & (~(square > x))){
		let y = temp;
	    }
	    let i = i - 1;
	}
	return y;
    }

    /** Returns the greater number. */
    function int max(int a, int b) {
	if (a > b){
	    return a;
	}
	else{
	    return b;
	}
    }

    /** Returns the smaller number. */
    function int min(int a, int b) {
	if (a < b){
	    return a;
	}
	else{
	    return b;
	}
    }


    /** Returns the i'th place in the twoToThe array. */
    function int twoToThe(int pos){
	return twoToThe[pos];
    }
}
