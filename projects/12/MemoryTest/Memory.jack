// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Memory.jack

/**
 * This library provides two services: direct access to the computer's main
 * memory (RAM), and allocation and recycling of memory blocks. The Hack RAM
 * consists of 32,768 words, each holding a 16-bit binary number.
 */ 
class Memory {
    static Array ram;
    static Array heap;
    static int freeList;
    static int rest; 

    /** Initializes the class. */
    function void init() {
	let ram = 0;
	let heap = 2048;
	let freeList = 2048;
	let rest = 2048;
	let heap[0] = null;
	let heap[1] = 14335;
	return;
    }

    /** Returns the RAM value at the given address. */
    function int peek(int address) {
	return ram[address];
    }

    /** Sets the RAM value at the given address to the given value. */
    function void poke(int address, int value) {
	let ram[address] = value;
	return;
    }

    /** Finds an available RAM block of the given size and returns
     *  a reference to its base address. */
    function int alloc(int size) {
	var int i,result;
	let i = freeList;
	while (heap[i + 1] < (size + 2)){
	    let i = heap[i];
	}
	let result = heap[i + 1] - (size + 2);
	let heap[i + 1] = result;
	let heap[i + result + 3] = size;
	let heap[i + result + 2] = null;
	return (i + result + 400);
    }

    /** De-allocates the given object (cast as an array) by making
     *  it available for future allocations. */
    function void deAlloc(Array o) {
	let heap[rest] = o;
	let rest = o;
	return;
    }    
}
